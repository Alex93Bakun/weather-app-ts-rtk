{"version":3,"file":"static/js/935.4d8e9148.chunk.js","mappings":"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","sources":["components/CardComponent.tsx","components/SearchBox.tsx","Pages/Home.tsx","axios/index.ts","components/Loader.tsx","services/WeatherService.ts","store/thunks/fetchCurrentWeather.ts"],"sourcesContent":["import React, { FC } from 'react';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport CardMedia from '@mui/material/CardMedia';\nimport Typography from '@mui/material/Typography';\nimport { Box, Button, CardActionArea } from '@mui/material';\nimport { Weather } from '../store/types/types';\nimport { useNavigate } from 'react-router-dom';\n\nconst CardComponent: FC<Weather> = ({\n    name,\n    main,\n    weather,\n    sys,\n    updateCityWeatherHandler,\n    index,\n}) => {\n    const navigate = useNavigate();\n\n    const icon = weather[0].icon;\n    const alt = weather[0].main;\n\n    const getDetailWeatherHandler = (name: string) => {\n        navigate(`${name}`);\n    };\n\n    return (\n        <Card sx={{ maxWidth: 345, width: '325px' }} onClick={() => getDetailWeatherHandler(name)}>\n            <CardActionArea>\n                <Box\n                    display=\"flex\"\n                    sx={{\n                        height: 100,\n                    }}\n                >\n                    <CardMedia\n                        component=\"img\"\n                        sx={{\n                            width: 100,\n                            height: 100,\n                        }}\n                        image={`http://openweathermap.org/img/w/${icon}.png`}\n                        alt={alt}\n                    />\n                    <Box\n                        flexGrow={1}\n                        display=\"flex\"\n                        flexDirection=\"column\"\n                        alignItems=\"flex-end\"\n                        justifyContent=\"flex-end\"\n                    >\n                        <Typography fontSize=\"30px\" padding=\"16px\">\n                            {Math.round(main.temp)}°C\n                        </Typography>\n                        <Typography fontSize=\"14px\" paddingRight=\"16px\">\n                            Feels like {Math.round(main.feels_like)}°C.\n                        </Typography>\n                    </Box>\n                </Box>\n                <CardContent\n                    sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}\n                >\n                    <Typography gutterBottom variant=\"h5\" component=\"div\">\n                        {name}, {sys.country}\n                    </Typography>\n                    <Button\n                        variant=\"text\"\n                        onClick={(e) => {\n                            e.stopPropagation();\n                            updateCityWeatherHandler(index);\n                        }}\n                    >\n                        Update\n                    </Button>\n                </CardContent>\n            </CardActionArea>\n        </Card>\n    );\n};\n\nexport default CardComponent;\n","import { Box, TextField } from '@mui/material';\nimport React, { FC, useState } from 'react';\nimport styled from 'styled-components';\nimport { useCustomDispatch } from '../hooks/store';\nimport { addCity } from '../store/thunks/addCity';\nimport { getUnique } from '../utils/getUnique';\n\nconst Container = styled.div`\n    width: 60%;\n    margin: 40px auto;\n`;\n\nconst SearchBox: FC = () => {\n    const [query, setQuery] = useState<any>('');\n    const dispatch = useCustomDispatch();\n\n    function selectCityHandler(e: React.KeyboardEvent<HTMLDivElement>): void {\n        if (e.key === 'Enter' && query.length > 0) {\n            const lsData = localStorage.getItem('cities');\n            if (lsData) {\n                const parsedData = JSON.parse(lsData);\n                parsedData.push(query);\n                localStorage.setItem('cities', JSON.stringify(getUnique(parsedData)));\n            }\n            dispatch(addCity(query));\n            setQuery('');\n        }\n    }\n\n    function onChangeHandler(e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) {\n        const { value } = e.target;\n        setQuery(value);\n    }\n\n    return (\n        <Container>\n            <Box\n                sx={{\n                    width: '100%',\n                    bgcolor: '#fff',\n                }}\n            >\n                <TextField\n                    fullWidth\n                    label=\"Type city name and press Enter\"\n                    onChange={(e) => onChangeHandler(e)}\n                    onKeyDown={(e) => selectCityHandler(e)}\n                    value={query}\n                />\n            </Box>\n        </Container>\n    );\n};\n\nexport default SearchBox;\n","import React, { FC, useEffect } from 'react';\n\nimport CardComponent from '../components/CardComponent';\nimport Loader from '../components/Loader';\nimport styled from 'styled-components';\nimport SearchBox from '../components/SearchBox';\nimport api from '../axios';\nimport { useCustomDispatch, useCustomSelector } from '../hooks/store';\nimport {\n    clearState,\n    fetchCurrentWeather,\n    updateCityWeather,\n} from '../store/thunks/fetchCurrentWeather';\nimport { Weather } from '../store/types/types';\n\nconst CardContainer = styled.div`\n    padding: 0 15px;\n    display: flex;\n    column-gap: 35px;\n    row-gap: 20px;\n    flex-wrap: wrap;\n`;\n\ninterface IHomeProps {\n    cities: string[];\n}\n\nconst Home: FC<IHomeProps> = ({ cities }) => {\n    const dispatch = useCustomDispatch();\n    const { weather, isLoading } = useCustomSelector((state) => state.currentWeatherSliceReducer);\n\n    useEffect(() => {\n        dispatch(clearState());\n        cities.forEach((city) => {\n            dispatch(fetchCurrentWeather(city));\n        });\n    }, [cities]);\n\n    const updateStateHandler = (index: number, state: Weather) => {\n        const newWeather = [...weather];\n        newWeather[index] = state;\n        dispatch(updateCityWeather(newWeather[index].name));\n    };\n\n    const updateCityWeatherHandler = async (cityIndex: number) => {\n        const { data } = await api.get(`/weather?q=${cities[cityIndex]}&units=metric`);\n        updateStateHandler(cityIndex, data);\n    };\n\n    if (isLoading) {\n        return <Loader />;\n    }\n\n    return (\n        <>\n            <SearchBox />\n            <CardContainer>\n                {weather.map((item: any, i: React.Key | null | undefined) => {\n                    console.log(item);\n                    return (\n                        <CardComponent\n                            key={i}\n                            {...item}\n                            updateCityWeatherHandler={updateCityWeatherHandler}\n                            index={i}\n                        />\n                    );\n                })}\n            </CardContainer>\n        </>\n    );\n};\n\nexport default Home;\n","import axios from 'axios';\n\nconst api = axios.create({\n    baseURL: process.env.REACT_APP_API_URL,\n});\n\napi.interceptors.request.use((config) => {\n    config.url = config.url + '&appid=' + process.env.REACT_APP_API_KEY;\n    return config;\n});\n\nexport default api;\n","import * as React from 'react';\nimport { FC } from 'react';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport Box from '@mui/material/Box';\n\nconst Loader: FC = () => {\n    return (\n        <Box sx={{ display: 'flex' }}>\n            <CircularProgress />\n        </Box>\n    );\n};\n\nexport default Loader;\n","import { AxiosResponse } from 'axios';\nimport { Weather } from '../store/types/types';\nimport api from '../axios';\n\nexport class WeatherService {\n    static getCurrentWeather(city: string): Promise<AxiosResponse<Weather>> {\n        return api.get<Weather>(`/weather?q=${city}&units=metric`);\n    }\n}\n","import { AppDispatch } from '../store';\nimport { currentWeatherSlice } from '../slices/currentWeatherSlice';\nimport { WeatherService } from '../../services/WeatherService';\n\nexport const fetchCurrentWeather = (payload: string) => async (dispatch: AppDispatch) => {\n    try {\n        dispatch(currentWeatherSlice.actions.fetchCurrentWeather());\n        const res = await WeatherService.getCurrentWeather(payload);\n        if (res.status === 200) {\n            dispatch(currentWeatherSlice.actions.fetchCurrentWeatherSuccess(res));\n        } else {\n            dispatch(currentWeatherSlice.actions.fetchCurrentWeatherError(res));\n        }\n    } catch (e) {\n        console.log(e);\n    }\n};\n\nexport const clearState = () => async (dispatch: AppDispatch) => {\n    dispatch(currentWeatherSlice.actions.clearState());\n};\n\nexport const updateCityWeather = (payload: string) => async (dispatch: AppDispatch) => {\n    const res = await WeatherService.getCurrentWeather(payload);\n    dispatch(currentWeatherSlice.actions.updateCityWeather(res));\n};\n"],"names":["name","main","weather","sys","updateCityWeatherHandler","index","navigate","useNavigate","icon","alt","Card","sx","maxWidth","width","onClick","getDetailWeatherHandler","CardActionArea","Box","display","height","CardMedia","component","image","flexGrow","flexDirection","alignItems","justifyContent","Typography","fontSize","padding","Math","round","temp","paddingRight","feels_like","CardContent","gutterBottom","variant","country","Button","e","stopPropagation","Container","styled","useState","query","setQuery","dispatch","useCustomDispatch","bgcolor","TextField","fullWidth","label","onChange","value","target","onChangeHandler","onKeyDown","key","length","lsData","localStorage","getItem","parsedData","JSON","parse","push","setItem","stringify","getUnique","addCity","selectCityHandler","CardContainer","cities","useCustomSelector","state","currentWeatherSliceReducer","isLoading","useEffect","clearState","forEach","city","fetchCurrentWeather","updateStateHandler","newWeather","updateCityWeather","cityIndex","api","data","Loader","map","item","i","console","log","axios","baseURL","process","interceptors","request","use","config","url","WeatherService","payload","currentWeatherSlice","getCurrentWeather","res","status"],"sourceRoot":""}